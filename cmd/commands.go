package main

import (
	"log"

	"github.com/yeqown/micro-server-demo/global"
	"github.com/yeqown/micro-server-demo/internal/model"
	"github.com/yeqown/micro-server-demo/internal/repository"
	_grpc "github.com/yeqown/micro-server-demo/internal/server/grpc"
	_http "github.com/yeqown/micro-server-demo/internal/server/http"

	"github.com/jinzhu/gorm"
	"github.com/urfave/cli"
	"github.com/yeqown/infrastructure/framework/gormic"
)

func connectDB() *gorm.DB {
	dbConn, err := gormic.ConnectSqlite3(global.GetConfig().Sqlite3)
	if err != nil {
		panic(err)
	}
	return dbConn
}

func getAutoGenerateDBCommand() cli.Command {
	dbConn := connectDB()

	return cli.Command{
		Name:  "generate",
		Usage: "auto generate DB tables",
		Action: func(c *cli.Context) error {
			dbConn.AutoMigrate(
				&model.FooModel{},
				// more...
			)
			return nil
		},
	}
}

func getStartServerCommand() cli.Command {
	dbConn := connectDB()
	fooRepo := repository.NewFooRepo(dbConn)

	return cli.Command{
		Name:  "start",
		Usage: "starting REST and GRPC servers",
		Flags: []cli.Flag{
			cli.IntFlag{
				Name:  "rpcPort",
				Value: 8080,
				Usage: "rpc server port",
			},
			cli.IntFlag{
				Name:  "httpPort",
				Value: 8081,
				Usage: "http server port",
			},
		},
		Action: func(c *cli.Context) error {
			httpPort := c.Int("httpPort")
			go func() {
				_httpSrv := _http.New(fooRepo, httpPort)
				if err := _httpSrv.Run(); err != nil {
					log.Fatal(err)
				}
			}()

			rpcPort := c.Int("rpcPort")
			_grpcSrv := _grpc.New(fooRepo, rpcPort)
			log.Printf("running gRPC server on: %d\n", rpcPort)
			return _grpcSrv.Run()
		},
	}
}
