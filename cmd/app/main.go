package main

import (
	"fmt"
	"io"
	"log"
	"os"
	"strings"

	"github.com/yeqown/micro-server-demo/global"
	types2 "github.com/yeqown/micro-server-demo/pkg/types"

	"github.com/yeqown/infrastructure/types"
	// _ "github.com/go-sql-driver/mysql"
	_ "github.com/jinzhu/gorm/dialects/sqlite"
	"github.com/urfave/cli"
	"github.com/yeqown/infrastructure/pkg/cfgutil"
)

func init() {
	var (
		cfg = new(types2.Config)
		fd  io.ReadCloser
		err error
	)

	curEnv := types.ParseEnvrion(
		strings.TrimSpace(os.Getenv("ENV")))
	types2.SetEnv(curEnv)

	if fd, err = cfgutil.Open(
		fmt.Sprintf("configs/%s.json", curEnv)); err != nil {
		panic(err)
	}
	defer fd.Close()

	// load JSON config file depends on `curEnv`
	if err := cfgutil.LoadJSON(fd, cfg); err != nil {
		panic(err)
	}

	types2.SetConfig(cfg)
	if err = global.InitRepos(cfg); err != nil {
		panic(err)
	}
}

// RUN GRPC SERVER and REST-HTTP SERVER
func main() {
	app := cli.NewApp()
	app.Version = "1.0.0"
	app.Author = "com.github.yeqown"
	app.Name = "micro-server-demo-cli"
	app.Usage = "micro-server-demo"

	mountCommands(app)

	if err := app.Run(os.Args); err != nil {
		log.Fatal(err)
	}
}

func mountCommands(app *cli.App) {
	app.Commands = []cli.Command{
		getAutoGenerateDBCommand(),
		getStartServerCommand(),
	}
}
